---
apiVersion: v1
data:
  SECURITY_OAUTH2_CLIENT_ID: {{ .Values.secrets.oauth.clientId | b64enc | quote }}
  SECURITY_OAUTH2_CLIENT_SECRET: {{ .Values.secrets.oauth.secret | b64enc | quote }}
kind: Secret
metadata:
  labels:
    app: {{ template "jenkins-servers.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    jenkins.io/credentials-type: usernamePassword
  annotations:
    jenkins.io/credentials-keybinding-password: BASIC_AUTH_PASS
    jenkins.io/credentials-keybinding-username: BASIC_AUTH_USER
  name: jenkins-operator-secrets-master
type: Opaque
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-master-backup
  labels:
    app: jenkins-operator
    jenkins-cr: master
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-operator-casc-master
  labels:
    app: {{ template "jenkins-servers.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  01-google-auth.yaml: |2
    jenkins: 
      securityRealm:
        googleOAuth2:
          clientId: "${SECURITY_OAUTH2_CLIENT_ID}"
          clientSecret: "${SECURITY_OAUTH2_CLIENT_SECRET}"
          rootURLFromRequest: true
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
  02-jobs.yaml: |2
    jobs:
      - script: >
          folder('nxmatic')
      - script: >
          multibranchPipelineJob('nxmatic/jxlabs-nos-app') {
            description('NOS web components')
            branchSources {
              github {
                id('80eb30c3-b6e9-4f00-975e-0e52c64f458e')
                scanCredentialsId('jx-pipeline-git-github-github')
                repoOwner('nxmatic')
                repository('jxlabs-nos-app')
                buildOriginBranchWithPR(false)
                buildForkPRHead(false)
                buildForkPRMerge(false)
                buildOriginBranch(true)
                buildOriginPRHead(false)
                buildOriginPRMerge(true)
                includes('master feature* improve* fix* PR-*')
              }
            }
            orphanedItemStrategy {
              discardOldItems {
                daysToKeep(14)
                numToKeep(5)
              }
            }
          }
  03-kubernetes.yaml: |2
    jenkins:
      clouds:
      - kubernetes:
          containerCapStr: "0"
          maxRequestsPerHostStr: "32"
          name: "kubernetes"
          namespace: "{{.Release.Namespace}}"
          podLabels:
          - key: "jenkins"
            value: "slave"
          - key: "resource"
            value: "pod"
          - key: "usage"
            value: "build"
          serverUrl: "https://kubernetes.default"
          templates:
            - containers:
              - args: "^${computer.jnlpmac} ^${computer.name}"
                image: "jenkinsci/jnlp-slave:3.26-1-alpine"
                livenessProbe:
                  failureThreshold: 0
                  initialDelaySeconds: 0
                  periodSeconds: 0
                  successThreshold: 0
                  timeoutSeconds: 0
                name: "jnlp"
                resourceRequestCpu: "100m"
                resourceRequestMemory: "128Mi"
                workingDir: "/home/jenkins"
              - image: "10.63.249.70:5000/nuxeo/nos/jenkins-x/nos-builder-java8:0.0.9"
                livenessProbe:
                  failureThreshold: 0
                  initialDelaySeconds: 0
                  periodSeconds: 0
                  successThreshold: 0
                  timeoutSeconds: 0
                name: "maven"
                privileged: true
                resourceLimitCpu: "6"
                resourceLimitMemory: "8Gi"
                resourceRequestCpu: "4"
                resourceRequestMemory: "6Gi"
                ttyEnabled: true
                workingDir: "/home/jenkins"
              envVars:
              - containerEnvVar:
                  key: "DOCKER_CONFIG"
                  value: "/home/jenkins/.docker/"
              - containerEnvVar:
                  key: "GIT_AUTHOR_EMAIL"
                  value: "nos+jx@nuxeo.com"
              - containerEnvVar:
                  key: "GIT_AUTHOR_NAME"
                  value: "nuxeo-nos-jx"
              - containerEnvVar:
                  key: "GIT_COMMITTER_EMAIL"
                  value: "nos+jx@nuxeo.com"
              - containerEnvVar:
                  key: "GIT_COMMITTER_NAME"
                  value: "nuxeo-nos-jx"
              - containerEnvVar:
                  key: "JAVA_TOOL_OPTIONS"
                  value: "-Dsun.zip.disableMemoryMapping=true -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=90 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90  -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=3"
              - containerEnvVar:
                  key: "JENKINS_URL"
                  value: "http://jenkins:8080"
              - containerEnvVar:
                  key: "MAVEN_OPTS"
                  value: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
              - containerEnvVar:
                  key: "NPM_CONFIG_REGISTRY"
                  value: "http://nexus/repository/npm-group/"
              - containerEnvVar:
                  key: "XDG_CONFIG_HOME"
                  value: "/home/jenkins"
              hostNetwork: false
              label: "jenkins-nos-java-8"
              name: "nos-java-8"
              nodeSelector: "team=nos"
              serviceAccount: "jenkins"
              volumes:
              - hostPathVolume:
                  hostPath: "/var/run/docker.sock"
                  mountPath: "/var/run/docker.sock"
              - secretVolume:
                  mountPath: "/home/jenkins/.m2"
                  secretName: "jenkins-maven-settings"
              - secretVolume:
                  mountPath: "/home/jenkins/.docker"
                  secretName: "jenkins-docker-cfg"
              - secretVolume:
                  mountPath: "/home/jenkins/.gnupg"
                  secretName: "jenkins-release-gpg"
              yamlMergeStrategy: "override"
              yaml: "apiVersion: v1\nkind: Pod\nspec:\n  tolerations:\n    - key: dedicated\n    operator: Equal\n    value: jenkins-x-builder\n    effect: NoSchedule\n"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: {{ template "jenkins-servers.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: jenkins-k8s-viewer
rules:
  - apiGroups:
      - jenkins.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - secrets
      - configmaps
      - services
    verbs:
      - list
      - get
      - watch
---
apiVersion: jenkins.io/v1alpha2
kind: Jenkins
metadata:
  name: master
  labels:
    app: {{ template "jenkins-servers.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  configurationAsCode:
    configurations: 
    - name: jenkins-operator-casc-master
    secret:
      name: jenkins-operator-secrets-master
  groovyScripts:
    configurations: null
    secret:
      name: ""
  jenkinsAPISettings:
    authorizationStrategy: createUser
  roles:
    - apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: jx-pipeline-activity-updater
    - apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: jenkins-k8s-viewer
  service:
    labels:
      app: jenkins-operator
      chart: {{ template "jenkins-servers.chart" . }}
      component: "master"
      heritage: {{ .Release.Service }}
      release: {{ .Release.Name }}
      jenkins-cr: master
    type: ClusterIP
    port: 8080
    type: ClusterIP
  slaveService:
    port: 50000
    type: ClusterIP
  master:
    labels:
      jenkins-cr: master
    disableCSRFProtection: false
    basePlugins:
      - name: google-login
        version: "1.6"
      - name: kubernetes
        version: "1.25.4"
      - name: workflow-job
        version: "2.39"
      - name: workflow-aggregator
        version: "2.6"
      - name: git
        version: "4.2.2"
      - name: job-dsl
        version: "1.77"
      - name: configuration-as-code
        version: "1.40"
      - name: configuration-as-code-support
        version: "1.19"
      - name: kubernetes-credentials-provider
        version: "0.14"
      - name: github-branch-source
        version: "2.6.0"
      - name: jx-resources
        version: "1.0.38"
    volumes:
    - name: backup
      persistentVolumeClaim:
        claimName: jenkins-master-backup
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
    containers:
    - name: jenkins-master
      image: jenkins/jenkins:lts
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 12
        httpGet:
          path: /login
          port: http
          scheme: HTTP
        initialDelaySeconds: 80
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /login
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: 1500m
          memory: 3Gi
        requests:
          cpu: "1"
          memory: 500Mi
    - name: backup
      env:
      - name: BACKUP_DIR
        value: /backup
      - name: JENKINS_HOME
        value: /jenkins-home
      - name: BACKUP_COUNT
        value: "3"
      command:
      - bash
      - -c
      - tail -f /dev/null
      image: virtuslab/jenkins-operator-backup-pvc:v0.0.8
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          cpu: 100m
          memory: 100Mi
        requests:
          cpu: 50m
          memory: 50Mi
      volumeMounts:
      - mountPath: /jenkins-home
        name: jenkins-home
      - mountPath: /backup
        name: backup
  backup:
    containerName: backup
    action:
      exec:
        command:
        - /home/user/bin/backup.sh 
    interval: 3600
    makeBackupBeforePodDeletion: true
  restore:
    containerName: backup
    action:
      exec:
        command:
        - /home/user/bin/restore.sh
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jenkins-operator-http-master
  labels:
    app: jenkins-operator
    jenkins-cr: master
  annotations:
    kubernetes.io/ingress.class: nginx
{{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: jenkins-operator-http-master
          servicePort: 8080
{{- if .Values.ingress.domain }}
    host: master{{ .Values.ingress.namespaceSubDomain }}{{ .Values.ingress.domain }}
{{- end }}
{{- if .Values.ingress.tls.enabled }}
  tls:
  - hosts:
    - master{{ .Values.ingress.namespaceSubDomain }}{{ .Values.ingress.domain }}
{{- if .Values.ingress.tls.secretName }}
    secretName: "{{ .Values.ingress.tls.secretName }}"
{{- else if .Values.ingress.tls.production }}
    secretName: "tls-{{ .Values.ingress.domain | replace "." "-" }}-p"
{{- else }}
    secretName: "tls-{{ .Values.ingress.domain | replace "." "-" }}-s"
{{- end }}
{{- end }}
