#+TITLE: jxlabs nos emacs integration

Provide elisp code which enable us to share behaviours in emacs. At this stage, it's
mainly about the get things done integration. It's activated once you're visiting
your [[https://github.com/nxmatic/jxlabs-nos-helmboot-config][helmboot config]] clone in emacs.

* code logic and structure

We've mapped it as a sub-module of the [[https://github.com/nxmatic/jxlabs-nos-helmboot-config][helmboot config]] repository at the [[https://github.com/nxmatic/jxlabs-nos-helmboot-config/.elisp/jxlabs-nos][.elisp/jxlabs-nos]] path.
The code is auto-loaded in through [[file:../../.dir-locals.el][.dir-locals.el] file.

#+NAME .dir-locals.el
#+BEGIN_SRC emacs-lisp
((nil
  .
  ((eval
    .
    (progn
      (unless (featurep 'jxlabs-nos/workspace)
	(let* ((this-directory (locate-dominating-file default-directory ".dir-locals.el"))
	       (this-name (file-name-base this-directory))
	       (this-lisp-directory (expand-file-name ".elisp" this-directory)))
	  (push this-lisp-directory load-path)
	  (require 'jxlabs-nos/workspace)))
      (jxlabs-nos/workspace/handle-buffer))))))
#+END_SRC

The main entry point is the [[file:workspace.el][workspace]] module which handle the buffer
visit. We also have [[file::features][features]] such as the [[file::features/get-things-done.el][get things done]] which are
loaded from the [[file:workspace.el][workspace]]. Each project may have specific logic
located in the [[file:projects][projects]] directory that are auto-loaded once you're
visiting the project.

#+BEGIN_SRC
|-- README.org
|-- features
|   |-- brain.el
|   |-- coding.el
|   |-- dir-locals-nested.el
|   `-- get-things-done.el
|-- projects
|   `-- helmboot-config.el
|-- projects.el
`-- workspace.el
#+END_SRC

* get things done 

We're intregating with the [[https//github.com/trevoke/org-gtd.el][org gtd repository]]. Here is below, an init suitable for loading it
in your setup.  Once entered in any jxlabs-nos module, we've configured org-gtd to locate 
it's database in the [[https://github.com/nxmatic/jxlabs-nos-get-things-done][get things done]] shared repository which is mapped in the helmboot
config at the [[https://github.com/jxlabs-nos-helmboot-config/.get-things-done][.get-things-done]] path.

#+NAME org-gtd repository init
#+BEGIN_SRC emacs-lisp
(straight-use-package '(org-gtd :type git :host github :repo "trevoke/org-gtd.el" :branch "master"))
(defun init-org-gtd (directory)
  (require 'org-gtd)
  (with-eval-after-load 'org-gtd
    (setq-local org-gtd-directory directory)) ;; where org-gtd will put its files
  (require 'org-agenda)
  (with-eval-after-load 'org-agenda
    (setq-local org-agenda-files `(,org-gtd-directory)))
  (require 'org-cliplink)
  (require 'org-macs) ;; needed for templating ...
  (require 'org-capture)
  (with-eval-after-load 'org-cliplink
    (with-eval-after-load 'org-macs
      (with-eval-after-load 'org-gtd
	(setq-local org-capture-templates
		    `(("i" "GTD item"
		       entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
		       "* %?\n%U\n\n  %i"
		       :kill-buffer t)
		      ("e" "GTD item with link to where you are in emacs now"
		       entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
		       "* %?\n%U\n\n  %i\n  %a"
		       :kill-buffer t)
		      ("c" "GTD item with link to what you have in clip-board"
		       entry (file ,(org-gtd--path org-gtd-inbox-file-basename))
		       "* %?\n%U\n\n %(org-cliplink-capture)\n  %a"
		       :kill-buffer t))))))
  t)

(with-eval-after-load  'org-gtd
  (progn
    ;; these are the interactive functions you're likely to want to use as you go about GTD.
    (global-set-key (kbd "C-c d c") 'org-gtd-capture) ;; add item to inbox
    (global-set-key (kbd "C-c d p") 'org-gtd-process-inbox) ;; process entire inbox
    (global-set-key (kbd "C-c d a") 'org-agenda-list) ;; see what's on your plate today
    (global-set-key (kbd "C-c d n") 'org-gtd-show-all-next) ;; see all NEXT items
    (global-set-key (kbd "C-c d s") 'org-gtd-show-stuck-projects) ;; see projects that don't have a N
     (global-set-key (kbd "C-c d l") 'org-cliplink) ;; capture link 
     
     (init-org-gtd "~/gtd")
     
     ;; package: https://www.nongnu.org/org-edna-el/
     ;; org-edna is used to make sure that when a project task gets DONE,
     ;; the next TODO is automatically changed to NEXT.
     (setq org-edna-use-inheritance t)
     (org-edna-load)

     ;; package: https://github.com/Malabarba/org-agenda-property
     ;; this is so you can see who an item was delegated to in the agenda
     (setq org-agenda-property-list '("DELEGATED_TO"))
     ;; I think this makes the agenda easier to read
     (setq org-agenda-property-position 'next-line)
     (add-hook 'org-capture-before-finalize-hook 'org-gtd-auto-tag)
     t))
#+END_SRC

